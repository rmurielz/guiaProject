# C:/proyecto/Guia/ERP/settings.py
"""
Django settings for ERP project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

# Lee los hosts permitidos desde una variable de entorno (ej: "localhost,127.0.0.1,midominio.com")
# Proporciona un valor predeterminado seguro para el desarrollo.
ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='127.0.0.1,localhost', cast=lambda v: [s.strip() for s in v.split(',')])

# Configuraciones de seguridad para producción (cuando DEBUG=False)
if not DEBUG:
    SECURE_SSL_REDIRECT = config('SECURE_SSL_REDIRECT', default=True, cast=bool)
    SESSION_COOKIE_SECURE = config('SESSION_COOKIE_SECURE', default=True, cast=bool)
    CSRF_COOKIE_SECURE = config('CSRF_COOKIE_SECURE', default=True, cast=bool)
    SECURE_HSTS_SECONDS = config('SECURE_HSTS_SECONDS', default=31536000, cast=int)  # 1 año
    SECURE_HSTS_INCLUDE_SUBDOMAINS = config('SECURE_HSTS_INCLUDE_SUBDOMAINS', default=True, cast=bool)
    SECURE_HSTS_PRELOAD = config('SECURE_HSTS_PRELOAD', default=True, cast=bool)

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'apps.core',
    'apps.terceros.apps.TercerosConfig',
    'apps.inventario.apps.InventarioConfig',
    'apps.empresa.apps.EmpresaConfig',
    'apps.usuarios.apps.UsuariosConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'apps.empresa.middleware.EmpresaSeleccionadaMiddleware',
]

ROOT_URLCONF = 'guia_erp.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'apps.empresa.context_processors.empresas_context',
            ],
        },
    },
]

WSGI_APPLICATION = 'guia_erp.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# Configuración de base de datos flexible.
# Lee la URL de la variable de entorno DATABASE_URL.
# Si no existe, usa sqlite por defecto para desarrollo.
DATABASES = {'default': dj_database_url.config(
    default=f'sqlite:///{BASE_DIR / "db.sqlite3"}')}

# --- Cache Configuration ---
# Configuración de caché robusta que se adapta al entorno.
if DEBUG:
    # Para desarrollo: LocMemCache es la más simple y no deja archivos.
    # No necesitamos que sea compatible con ratelimit porque no se cargará.
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'unique-snowflake',
        }
    }
else:
    # Para producción: Se prioriza Redis si está configurado.
    CACHE_URL = config('CACHE_URL', default=None)
    if CACHE_URL and CACHE_URL.startswith('redis://'):
        CACHES = {
            'default': {
                'BACKEND': 'django_redis.cache.RedisCache',
                'LOCATION': CACHE_URL,
                'OPTIONS': {
                    'CLIENT_CLASS': 'django_redis.client.DefaultClient',
                }
            }
        }
    else:
        # Fallback a FileBasedCache si no se provee una URL de Redis.
        cache_dir = '/tmp/django_cache' if config('RAILWAY_ENVIRONMENT_NAME', default=None) else BASE_DIR / 'django_cache'
        CACHES = {
            'default': {
                'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
                'LOCATION': cache_dir,
            }
        }

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'es-co'

TIME_ZONE = 'America/Bogota'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Directorio donde `collectstatic` reunirá los archivos estáticos para producción.
# https://docs.djangoproject.com/en/5.2/ref/settings/#static-root
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Almacenamiento de archivos estáticos para un cache-busting eficiente en producción.
if not DEBUG:
    STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# GEONAMES_USERNAME es requerido para la funcionalidad de geolocalización.
GEONAMES_USERNAME = config('GEONAMES_USERNAME')

# --- Django Ratelimit Configuration ---
RATELIMIT_ENABLE = config('RATELIMIT_ENABLE', default=True, cast=bool)
RATELIMIT_KEY = 'ip'
RATELIMIT_RATE = config('RATELIMIT_RATE', default='100/m')
RATELIMIT_BLOCK = config('RATELIMIT_BLOCK', default=True, cast=bool)
RATELIMIT_VIEW = 'django_ratelimit.views.ratelimited'
RATELIMIT_USE_CACHE = 'default'

# --- Activación Condicional de Ratelimit ---
# La práctica estándar es activar `ratelimit` solo en producción (cuando DEBUG=False)
# para evitar problemas con cachés de desarrollo y simplificar el entorno local.
if not DEBUG and RATELIMIT_ENABLE:
    # Añadir 'django_ratelimit' a las aplicaciones instaladas
    INSTALLED_APPS.append('django_ratelimit')
    # Insertar el middleware en una posición adecuada. Después de CommonMiddleware es una buena opción.
    MIDDLEWARE.insert(3, 'django_ratelimit.middleware.RatelimitMiddleware')

LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'dashboard'
LOGOUT_REDIRECT_URL = 'login'

# --- Tiempos de Expiración de Cache Centralizados ---
CACHE_TIMEOUTS = {
    'GEONAMES_PAISES': 86400,      # 24 horas
    'GEONAMES_DIVISIONES': 21600,  # 6 horas
    'GEONAMES_CIUDADES': 7200,     # 2 horas
    'FORM_CHOICES': 3600,          # 1 hora
    'DASHBOARD_STATS': 300,        # 5 minutos
}
LOGIN_URL = 'login'
LOGIN_REDIRECT_URL = 'dashboard'
LOGOUT_REDIRECT_URL = 'login'
